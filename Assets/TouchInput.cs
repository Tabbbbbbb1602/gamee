//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/TouchInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchInput"",
    ""maps"": [
        {
            ""name"": ""touch"",
            ""id"": ""8806a057-486f-4a97-81b1-d0feb6fc28cf"",
            ""actions"": [
                {
                    ""name"": ""touchpos"",
                    ""type"": ""Value"",
                    ""id"": ""791b4e77-7745-4615-abf0-755cec08fa62"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""touchhold"",
                    ""type"": ""Button"",
                    ""id"": ""012e696f-2f94-4ec2-b59b-8d53ec501a6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e1e79bde-d1aa-4cd6-89fc-c955c83bc5d6"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchpos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8b49053-1a19-49ef-ba99-ff17f2971839"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchhold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // touch
        m_touch = asset.FindActionMap("touch", throwIfNotFound: true);
        m_touch_touchpos = m_touch.FindAction("touchpos", throwIfNotFound: true);
        m_touch_touchhold = m_touch.FindAction("touchhold", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // touch
    private readonly InputActionMap m_touch;
    private ITouchActions m_TouchActionsCallbackInterface;
    private readonly InputAction m_touch_touchpos;
    private readonly InputAction m_touch_touchhold;
    public struct TouchActions
    {
        private @TouchInput m_Wrapper;
        public TouchActions(@TouchInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @touchpos => m_Wrapper.m_touch_touchpos;
        public InputAction @touchhold => m_Wrapper.m_touch_touchhold;
        public InputActionMap Get() { return m_Wrapper.m_touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void SetCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterface != null)
            {
                @touchpos.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchpos;
                @touchpos.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchpos;
                @touchpos.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchpos;
                @touchhold.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchhold;
                @touchhold.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchhold;
                @touchhold.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchhold;
            }
            m_Wrapper.m_TouchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @touchpos.started += instance.OnTouchpos;
                @touchpos.performed += instance.OnTouchpos;
                @touchpos.canceled += instance.OnTouchpos;
                @touchhold.started += instance.OnTouchhold;
                @touchhold.performed += instance.OnTouchhold;
                @touchhold.canceled += instance.OnTouchhold;
            }
        }
    }
    public TouchActions @touch => new TouchActions(this);
    public interface ITouchActions
    {
        void OnTouchpos(InputAction.CallbackContext context);
        void OnTouchhold(InputAction.CallbackContext context);
    }
}
